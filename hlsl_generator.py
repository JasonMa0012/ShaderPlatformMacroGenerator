from models import Config, FeatureGroup
from config_manager import ConfigManager

def generate_hlsl(config: Config) -> str:
    output = [config.prefix + "\n"] if config.prefix else []
    output.append("// Generated by Shader Platform Macro Generator (https://github.com/JasonMa0012/ShaderPlatformMacroGenerator)\n")
    output.append(f"#ifndef {config.file_include_macro}")
    output.append(f"    #define {config.file_include_macro}\n")
    
    
    # Platform condition checks
    for i, platform in enumerate(config.platforms):
        condition = "#if" if i == 0 else "#elif"
        output.append(f"    {condition} ({' || '.join([f'defined({macro})' for macro in platform.macros])})")
        
        # Quality level condition chain
        for i_quality, quality in enumerate(config.qualities):
            q_condition = "#if" if i_quality == 0 else "#elif"
            or_condition = ' || '.join([f'defined({macro})' for macro in quality.macros])
            output.append(f"        {q_condition} ({or_condition})")
            
            # Features
            key = "||".join([f"{p}|{q}" for p in platform.macros for q in quality.macros])
            for group in config.feature_groups:
                for feature in group.features:
                    value = config.get_feature_state(platform, quality, feature)
                    for macro in feature.macros:
                        output.append(f"            #define {macro} {int(value)}")
        
        output.append("        #endif")
    
    output.append("    #endif\n")
    output.append(f"#endif // {config.file_include_macro}")
    
    return '\n'.join(output) + ("\n" + config.postfix if config.postfix else "")